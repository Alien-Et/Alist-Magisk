name: 构建 AList Magisk 模块

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: 检出仓库
        uses: actions/checkout@v4

      # 安装依赖工具
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y curl zip

      # 获取 AList 最新版本
      - name: 获取 AList 最新版本
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_URL: https://api.github.com/repos/AlistGo/alist/releases/latest
        run: |
          for i in {1..3}; do
            RESPONSE=$(curl -s -L -w "\n%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            if [ "$HTTP_CODE" -eq 200 ] && [ -n "$BODY" ]; then
              echo "成功获取 AList Release 数据"
              echo "$BODY" > latest_release.json
              break
            fi
            echo "尝试 $i 失败，HTTP 状态码: $HTTP_CODE"
            sleep $((5 * i))
          done

          if [ ! -f latest_release.json ] || [ ! -s latest_release.json ]; then
            echo "::error::无法获取 AList 版本信息"
            exit 1
          fi

          VERSION=$(echo "$BODY" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -z "$VERSION" ]; then
            echo "::error::无法提取版本号，tag_name 可能不存在"
            cat latest_release.json
            exit 1
          fi

          VERSION_CODE=$(echo "$VERSION" | tr -d 'v' | tr -d '.' | awk '{printf "%d%02d", $1, $2}')
          ARM_URL=$(echo "$BODY" | grep '"browser_download_url":' | grep 'alist-android-arm.tar.gz' | sed -E 's/.*"([^"]+)".*/\1/')
          ARM64_URL=$(echo "$BODY" | grep '"browser_download_url":' | grep 'alist-android-arm64.tar.gz' | sed -E 's/.*"([^"]+)".*/\1/')
          CHANGELOG=$(echo "$BODY" | grep '"body":' | sed -E 's/.*"body":\s*"([^"]+)"([,}]).*/\1/' | sed 's/\\"/"/g')

          if [ -z "$ARM_URL" ] || [ -z "$ARM64_URL" ]; then
            echo "::error::无法提取二进制下载链接"
            exit 1
          fi

          echo "ALIST_VERSION=$VERSION" >> $GITHUB_ENV
          echo "ALIST_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "ALIST_ARM_URL=$ARM_URL" >> $GITHUB_ENV
          echo "ALIST_ARM64_URL=$ARM64_URL" >> $GITHUB_ENV
          echo "ALIST_CHANGELOG=$CHANGELOG" >> $GITHUB_ENV

      # 检查当前模块版本
      - name: 检查当前模块版本
        id: check_version
        run: |
          if [ -f update.json ]; then
            CURRENT_VERSION=$(grep '"version":' update.json | sed -E 's/.*"version":\s*"([^"]+)".*/\1/')
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          else
            echo "CURRENT_VERSION=none" >> $GITHUB_ENV
          fi

      # 比较版本并决定是否构建
      - name: 检查是否需要构建
        id: should_build
        run: |
          if [ "${{ env.CURRENT_VERSION }}" = "none" ] || [ "${{ env.ALIST_VERSION }}" != "${{ env.CURRENT_VERSION }}" ]; then
            echo "需要构建新模块：AList 版本 ${{ env.ALIST_VERSION }}，当前模块版本 ${{ env.CURRENT_VERSION }}"
            echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          else
            echo "模块版本已是最新 (${{ env.ALIST_VERSION }})，无需构建"
            echo "SHOULD_BUILD=false" >> $GITHUB_ENV
          fi

      # 构建 Magisk 模块并强制覆盖仓库文件
      - name: 构建 Magisk 模块并强制覆盖仓库文件
        if: env.SHOULD_BUILD == 'true'
        run: |
          rm -rf Alist-Magisk
          mkdir -p Alist-Magisk/system/bin

          curl -L -o alist-arm.tar.gz "${{ env.ALIST_ARM_URL }}"
          tar -xzf alist-arm.tar.gz -C Alist-Magisk/system/bin
          mv Alist-Magisk/system/bin/alist Alist-Magisk/system/bin/alist-arm
          rm -f alist-arm.tar.gz

          curl -L -o alist-arm64.tar.gz "${{ env.ALIST_ARM64_URL }}"
          tar -xzf alist-arm64.tar.gz -C Alist-Magisk/system/bin
          mv Alist-Magisk/system/bin/alist Alist-Magisk/system/bin/alist-arm64
          rm -f alist-arm64.tar.gz

          chmod 755 Alist-Magisk/system/bin/alist-arm Alist-Magisk/system/bin/alist-arm64

          # 创建 module.prop
          cat > Alist-Magisk/module.prop << EOF
          id=alist-magisk
          name=AList Magisk Module
          version=${{ env.ALIST_VERSION }}
          versionCode=${{ env.ALIST_VERSION_CODE }}
          author=Alien-Et
          description=【已停止】请点击"操作"启动程序。项目地址：https://github.com/Alien-Et/Alist-Magisk
          updateJson=https://raw.githubusercontent.com/Alien-Et/Alist-Magisk/main/update.json
          EOF

          # 创建 customize.sh
          cat > Alist-Magisk/customize.sh << 'EOF'
          #!/system/bin/sh
          ui_print "正在安装 AList Magisk 模块..."
          ARCH=$(getprop ro.product.cpu.abi)
          ui_print "检测到架构: $ARCH"

          if echo "$ARCH" | grep -q "arm64"; then
            ui_print "安装 64 位 AList 二进制..."
            mv $MODPATH/system/bin/alist-arm64 $MODPATH/system/bin/alist
            rm $MODPATH/system/bin/alist-arm
          else
            ui_print "安装 32 位 AList 二进制..."
            mv $MODPATH/system/bin/alist-arm $MODPATH/system/bin/alist
            rm $MODPATH/system/bin/alist-arm64
          fi

          chmod 755 $MODPATH/system/bin/alist
          ui_print "AList 已安装到 /system/bin/alist"
          EOF

          # 创建 service.sh
          cat > Alist-Magisk/service.sh << 'EOF'
          #!/system/bin/sh
          # service.sh for AList Magisk Module

          MODDIR=${0%/*}
          DATA_DIR="$MODDIR/data"
          ALIST_BINARY="/system/bin/alist"
          MODULE_PROP="$MODDIR/module.prop"
          PASSWORD_FILE="$MODDIR/随机密码.txt"
          REPO_URL="https://github.com/Alien-Et/Alist-Magisk"

          get_lan_ip() {
            LAN_IP=$(ip addr show wlan0 2>/dev/null | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
            [ -z "$LAN_IP" ] && LAN_IP=$(ifconfig wlan0 2>/dev/null | grep 'inet ' | awk '{print $2}')
            [ -z "$LAN_IP" ] && LAN_IP="192.168.x.x"
            echo "$LAN_IP"
          }

          generate_random_password() {
            OUTPUT=$($ALIST_BINARY admin random --data "$DATA_DIR" 2>&1 | \
                     grep -E "username|password" | \
                     awk '/username/ {print "账号：" $NF} /password/ {print "密码：" $NF}')
            if [ -n "$OUTPUT" ]; then
              echo "$OUTPUT" > "$PASSWORD_FILE"
              chmod 644 "$PASSWORD_FILE"
              echo "密码已保存到 $PASSWORD_FILE"
              echo "$OUTPUT"
            else
              echo "警告: 无法生成或捕获账号和密码"
              return 1
            fi
          }

          update_module_prop_running() {
            LAN_IP=$(get_lan_ip)
            if [ -f "$PASSWORD_FILE" ]; then
              USERNAME=$(grep "账号：" "$PASSWORD_FILE" | awk '{print $2}')
              PASSWORD=$(grep "密码：" "$PASSWORD_FILE" | awk '{print $2}')
              if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
                sed -i "s|^description=.*|description=【运行中】局域网地址：http://${LAN_IP}:5244 项目地址：${REPO_URL}\n初始账号：${USERNAME}\n初始密码：${PASSWORD}\n（初始密码仅在你未手动修改时有效）|" "$MODULE_PROP"
              else
                sed -i "s|^description=.*|description=【运行中】局域网地址：http://${LAN_IP}:5244 项目地址：${REPO_URL}|" "$MODULE_PROP"
              fi
            else
              sed -i "s|^description=.*|description=【运行中】局域网地址：http://${LAN_IP}:5244 项目地址：${REPO_URL}|" "$MODULE_PROP"
            fi
          }

          MAX_WAIT=60
          WAIT_INTERVAL=2
          ELAPSED=0

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            if [ "$(getprop sys.boot_completed)" = "1" ]; then
              echo "Android 系统启动完成，开始启动 AList 服务"
              break
            fi
            echo "等待 Android 系统启动... ($ELAPSED/$MAX_WAIT 秒)"
            sleep $WAIT_INTERVAL
            ELAPSED=$((ELAPSED + WAIT_INTERVAL))
          done

          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "警告：系统启动超时，尝试启动 AList 服务"
          fi

          mkdir -p "$DATA_DIR"

          $ALIST_BINARY server --data "$DATA_DIR" &
          sleep 1
          if pgrep -f alist >/dev/null; then
            echo "AList 服务启动成功"
            if [ ! -f "$PASSWORD_FILE" ]; then
              generate_random_password || echo "密码生成失败，继续运行"
            else
              echo "检测到 $PASSWORD_FILE，跳过密码生成"
            fi
            update_module_prop_running
          else
            echo "无法启动 AList 服务"
            exit 1
          fi
          EOF

          # 创建 action.sh
          cat > Alist-Magisk/action.sh << 'EOF'
          #!/system/bin/sh
          # action.sh for AList Magisk Module

          MODDIR=${0%/*}
          ALIST_BINARY="/system/bin/alist"
          DATA_DIR="$MODDIR/data"
          MODULE_PROP="$MODDIR/module.prop"
          SERVICE_SH="$MODDIR/service.sh"
          REPO_URL="https://github.com/Alien-Et/Alist-Magisk"

          check_alist_status() {
            if pgrep -f alist >/dev/null; then
              return 0
            else
              return 1
            fi
          }

          update_module_prop_stopped() {
            sed -i "s|^description=.*|description=【已停止】请点击\"操作\"启动程序。项目地址：${REPO_URL}|" "$MODULE_PROP"
          }

          if check_alist_status; then
            pkill -f alist
            sleep 1
            if check_alist_status; then
              echo "无法停止 AList 服务"
              exit 1
            else
              echo "AList 服务已停止"
              update_module_prop_stopped
            fi
          else
            if [ -f "$SERVICE_SH" ]; then
              sh "$SERVICE_SH"
              sleep 1
              if check_alist_status; then
                echo "AList 服务启动成功"
              else
                echo "无法启动 AList 服务"
                exit 1
              fi
            else
              echo "错误：service.sh 不存在"
              exit 1
            fi
          fi
          EOF
          chmod 755 Alist-Magisk/action.sh

          # 创建 update.json
          cat > update.json << EOF
          {
              "version": "${{ env.ALIST_VERSION }}",
              "versionCode": ${{ env.ALIST_VERSION_CODE }},
              "zipUrl": "https://github.com/Alien-Et/Alist-Magisk/releases/download/${{ env.ALIST_VERSION }}/alist-magisk-${{ env.ALIST_VERSION }}.zip",
              "changelog": "https://raw.githubusercontent.com/Alien-Et/Alist-Magisk/main/Alist-Magisk/CHANGELOG.md"
          }
          EOF

          # 创建 CHANGELOG.md
          cat > Alist-Magisk/CHANGELOG.md << EOF
          # Changelog
          - ${{ env.ALIST_VERSION }}: Synced with AList official release ${{ env.ALIST_VERSION }}
          ${{ env.ALIST_CHANGELOG }}
          EOF

          # 创建模块专用的 README.md
          cat > Alist-Magisk/README.md << EOF
          # AList Magisk 模块安装指南

          本模块将 [AList](https://github.com/AlistGo/alist) 文件服务器集成到 Android 系统中，当前版本：${{ env.ALIST_VERSION }}。

          ## 功能
          - 自动同步 AList 官方版本
          - 支持 ARM 和 ARM64 架构
          - 首次启动生成随机管理员账号和密码，保存到 \`/data/adb/modules/alist-magisk/随机密码.txt\`（格式为“账号：xxx”和“密码：xxx”）
          - 系统启动后自动运行 AList 服务，数据存储在模块的 \`data\` 目录（/data/adb/modules/alist-magisk/data）
          - 通过 Magisk 的“动作”按钮切换 AList 服务状态
          - 账号和密码显示在 module.prop 的 description 中

          ## 安装流程
          1. **准备工作**：
             - 确保设备已安装 Magisk（建议 v28.0 或更高版本以支持动作按钮）。
             - 设备已获得 Root 权限。
             - 确保有网络连接以下载模块。

          2. **下载模块**：
             - 从 [GitHub Releases](https://github.com/Alien-Et/Alist-Magisk/releases) 下载最新模块 ZIP 文件（例如：alist-magisk-${{ env.ALIST_VERSION }}.zip）。

          3. **安装模块**：
             - 打开 Magisk 应用，进入“模块”选项卡。
             - 点击“从本地安装”，选择下载的 ZIP 文件。
             - 安装过程会显示：
               - 设备架构（ARM 或 ARM64）。
               - AList 二进制安装路径（/system/bin/alist）。
             - 安装完成后，重启设备以启动 AList 服务并生成初始密码。

          4. **验证安装**：
             - 检查 \`/data/adb/modules/alist-magisk/随机密码.txt\` 是否存在（首次启动后生成，格式为“账号：xxx”和“密码：xxx”）。
             - 查看 \`/data/adb/modules/alist-magisk/module.prop\`，确认 description 包含账号和密码。
             - 运行以下命令检查 AList 服务：
               \`\`\`bash
               alist version
               \`\`\`
             - 访问 AList Web 界面（默认：http://localhost:5244，使用 \`随机密码.txt\` 中的账号和密码登录）。

          ## 使用说明
          - **服务管理**：
            - AList 服务在系统启动完成后自动运行（通过 service.sh），模块描述显示：
              \`\`\`
              【运行中】局域网地址：http://<设备IP>:5244 项目地址：https://github.com/Alien-Et/Alist-Magisk
              初始账号：xxx
              初始密码：xxx
              （初始密码仅在你未手动修改时有效）
              \`\`\`
            - 在 Magisk 应用中点击“动作”按钮：
              - 如果 AList 服务正在运行，点击停止服务，模块描述更新为：\`【已停止】请点击"操作"启动程序。项目地址：https://github.com/Alien-Et/Alist-Magisk\`。
              - 如果 AList 服务未运行，点击启动服务，模块描述恢复为运行状态。
          - **数据目录**：AList 数据存储在 \`/data/adb/modules/alist-magisk/data\`，覆盖安装不会重置密码（除非手动删除 随机密码.txt）。
          - **密码生成**：
            - 首次安装并重启后，自动生成随机密码，保存到 \`随机密码.txt\`。
            - 后续重启若 \`随机密码.txt\` 存在，则不修改密码；若不存在，则生成新密码。
            - 密码格式：
              \`\`\`
              账号：admin
              密码：xxxxxxxx
              \`\`\`
            - 初始账号和密码显示在 module.prop 的 description 中，带备注“初始密码仅在你未手动修改时有效”。
          - **更新模块**：通过 Magisk 检查更新，或手动下载最新 ZIP 文件重新安装。
          - **卸载模块**：在 Magisk 中禁用或删除模块，重启设备（data 目录和 随机密码.txt 需手动清理）。

          ## 常见问题
          - **Q: 无法访问 Web 界面？**
            - 确保网络正常，尝试使用设备 IP 访问（http://<设备IP>:5244）。
            - 检查服务状态：
              \`\`\`bash
              pgrep -f alist
              \`\`\`
            - 手动启动服务：
              \`\`\`bash
              su -c /data/adb/modules/alist-magisk/action.sh
              \`\`\`
          - **Q: 密码丢失？**
            - 查看 \`/data/adb/modules/alist-magisk/随机密码.txt\` 或 module.prop 的 description。
            - 若 随机密码.txt 被删除，可重启设备重新生成密码。
          - **Q: 动作按钮无法停止服务？**
            - 确保 Magisk 版本 >= v28.0。
            - 手动检查：
              \`\`\`bash
              su -c pkill -f alist
              su -c /data/adb/modules/alist-magisk/action.sh
              \`\`\`

          ## 更多信息
          访问 [项目主页](https://github.com/Alien-Et/Alist-Magisk) 获取完整文档和更新日志。
          EOF

          # 创建根目录 README.md
          cat > README.md << EOF
          # AList Magisk 模块

          [![Release](https://img.shields.io/github/v/release/Alien-Et/Alist-Magisk)](https://github.com/Alien-Et/Alist-Magisk/releases)
          [![License](https://img.shields.io/github/license/Alien-Et/Alist-Magisk)](https://github.com/Alien-Et/Alist-Magisk/blob/main/LICENSE)

          AList Magisk 模块将 [AList](https://github.com/AlistGo/alist) 文件服务器集成到 Android 系统中，通过 Magisk 以系统化方式运行，支持 ARM 和 ARM64 架构。

          ## 功能亮点
          - **最新版本同步**：自动跟踪 AList 官方版本（当前：${{ env.ALIST_VERSION }}）。
          - **无缝集成**：将 AList 二进制安装到 /system/bin，系统启动后自动运行。
          - **随机凭据**：首次启动服务时生成管理员账号和密码，保存到模块目录（格式为“账号：xxx”和“密码：xxx”），后续重启根据 随机密码.txt 存在性决定是否重置。
          - **动态服务管理**：通过 Magisk 的“动作”按钮切换 AList 服务状态（启动/停止），模块描述动态显示服务状态、局域网地址和初始账号密码。
          - **更新支持**：通过 update.json 提供模块更新检查。
          - **轻量高效**：占用空间小，适合 Android 设备。

          ## 快速开始
          1. **下载**：从 [GitHub Releases](https://github.com/Alien-Et/Alist-Magisk/releases) 获取最新模块（alist-magisk-${{ env.ALIST_VERSION }}.zip）。
          2. **安装**：
             - 在 Magisk 应用中选择“从本地安装”，加载 ZIP 文件。
             - 重启设备以应用模块并启动 AList 服务。
          3. **使用**：
             - 查看 \`/data/adb/modules/alist-magisk/随机密码.txt\` 或 module.prop 的 description 获取账号和密码（首次启动后生成）。
             - 访问 http://localhost:5244 或设备 IP 的 5244 端口，登录 AList Web 界面。
             - 在 Magisk 应用中点击“动作”按钮切换服务状态，模块描述会动态更新。

          ## 详细文档
          - **安装和使用**：查看 [模块自述文件](Alist-Magisk/README.md) 获取详细安装流程和故障排除。
          - **更新日志**：查看 [CHANGELOG.md](Alist-Magisk/CHANGELOG.md)。
          - **问题反馈**：提交 [Issue](https://github.com/Alien-Et/Alist-Magisk/issues).

          ## 贡献
          - 欢迎提交 Pull Request 或 Issue。
          - 感谢 [AList](https://github.com/AlistGo/alist) 项目提供支持。

          ## 许可证
          本项目基于 [MIT 许可证](LICENSE) 发布。
          EOF

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Alist-Magisk/ update.json README.md
          git commit -m "更新 AList Magisk 模块文件到 ${{ env.ALIST_VERSION }}" || echo "无更改需要提交"
          git push https://x-access-token:${{ env.GITHUB_TOKEN }}@github.com/Alien-Et/Alist-Magisk.git

          cd Alist-Magisk
          zip -r ../alist-magisk-${{ env.ALIST_VERSION }}.zip module.prop customize.sh service.sh action.sh system CHANGELOG.md README.md
          cd ..

      # 创建 GitHub Release
      - name: 创建 GitHub Release
        if: env.SHOULD_BUILD == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.ALIST_VERSION }}
          release_name: AList Magisk Module ${{ env.ALIST_VERSION }}
          draft: false
          prerelease: false

      # 上传模块到 Release
      - name: 上传模块到 Release
        if: env.SHOULD_BUILD == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./alist-magisk-${{ env.ALIST_VERSION }}.zip
          asset_name: alist-magisk-${{ env.ALIST_VERSION }}.zip
          asset_content_type: application/zip

      # 清理工作目录
      - name: 清理工作目录
        if: always()
        run: |
          rm -rf alist-magisk-*.zip alist-arm*.tar.gz latest_release.json
          echo "已清理临时文件：alist-magisk-*.zip, alist-arm*.tar.gz, latest_release.json"