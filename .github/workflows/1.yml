name: 构建 AList Magisk 模块

on:
  # 定时任务，每天 UTC 00:00（北京时间 08:00）运行
  schedule:
    - cron: '0 0 * * *'
  # 允许手动触发
  workflow_dispatch:
  # 首次推送时触发
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: 检出仓库
        uses: actions/checkout@v4

      # 设置 Node.js 环境（用于处理 JSON）
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 安装依赖工具
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl zip

      # 获取 AList 最新版本和校验和
      - name: 获取 AList 最新版本
        id: get_version
        run: |
          # 获取 AList 官方 API 版本，三次重试
          for i in {1..3}; do
            LATEST_RELEASE=$(curl -s --retry 3 https://api.github.com/repos/alist-org/alist/releases/latest)
            if [ -n "$LATEST_RELEASE" ]; then break; fi
            sleep 5
          done
          if [ -z "$LATEST_RELEASE" ]; then
            echo "无法获取 AList 版本信息"
            exit 1
          fi
          VERSION=$(echo $LATEST_RELEASE | jq -r .tag_name)
          VERSION_CODE=$(echo $VERSION | tr -d 'v' | tr -d '.' | awk '{printf "%d%02d", $1, $2}')
          ARM_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | contains("alist-android-arm.tar.gz")) | .browser_download_url')
          ARM64_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | contains("alist-android-arm64.tar.gz")) | .browser_download_url')
          CHANGELOG=$(echo $LATEST_RELEASE | jq -r .body | sed 's/"/\\"/g')
          # 获取校验和（假设 AList 提供 checksums.txt）
          CHECKSUM_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | contains("checksums.txt")) | .browser_download_url // empty')
          echo "ALIST_VERSION=$VERSION" >> $GITHUB_ENV
          echo "ALIST_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "ALIST_ARM_URL=$ARM_URL" >> $GITHUB_ENV
          echo "ALIST_ARM64_URL=$ARM64_URL" >> $GITHUB_ENV
          echo "ALIST_CHANGELOG=$CHANGELOG" >> $GITHUB_ENV
          echo "ALIST_CHECKSUM_URL=$CHECKSUM_URL" >> $GITHUB_ENV

      # 检查当前模块版本（从本地 update.json）
      - name: 检查当前模块版本
        id: check_version
        run: |
          if [ -f update.json ]; then
            CURRENT_VERSION=$(jq -r .version update.json)
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          else
            echo "CURRENT_VERSION=none" >> $GITHUB_ENV
          fi

      # 比较版本并决定是否构建
      - name: 检查是否需要构建
        id: should_build
        run: |
          if [ "${{ env.CURRENT_VERSION }}" = "none" ] || [ "${{ env.ALIST_VERSION }}" != "${{ env.CURRENT_VERSION }}" ]; then
            echo "需要构建新模块：AList 版本 ${{ env.ALIST_VERSION }}，当前模块版本 ${{ env.CURRENT_VERSION }}"
            echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          else
            echo "模块版本已是最新 (${{ env.ALIST_VERSION }})，无需构建"
            echo "SHOULD_BUILD=false" >> $GITHUB_ENV
          fi

      # 构建 Magisk 模块并写入仓库
      - name: 构建 Magisk 模块
        if: env.SHOULD_BUILD == 'true'
        run: |
          # 创建模块目录结构
          mkdir -p Alist-Magisk/system/bin
          
          # 下载并解压 AList 32 位二进制
          curl -L -o alist-arm.tar.gz "${{ env.ALIST_ARM_URL }}"
          tar -xzf alist-arm.tar.gz -C Alist-Magisk/system/bin
          mv Alist-Magisk/system/bin/alist Alist-Magisk/system/bin/alist-arm
          
          # 下载并解压 AList 64 位二进制
          curl -L -o alist-arm64.tar.gz "${{ env.ALIST_ARM64_URL }}"
          tar -xzf alist-arm64.tar.gz -C Alist-Magisk/system/bin
          mv Alist-Magisk/system/bin/alist Alist-Magisk/system/bin/alist-arm64
          
          # 下载校验和文件（如果存在）
          if [ -n "${{ env.ALIST_CHECKSUM_URL }}" ]; then
            curl -L -o Alist-Magisk/system/bin/checksums.txt "${{ env.ALIST_CHECKSUM_URL }}"
          fi
          
          # 设置二进制权限
          chmod 755 Alist-Magisk/system/bin/alist-arm Alist-Magisk/system/bin/alist-arm64
          
          # 创建 module.prop
          cat > Alist-Magisk/module.prop << EOF
          id=alist-magisk
          name=AList Magisk Module
          version=${{ env.ALIST_VERSION }}
          versionCode=${{ env.ALIST_VERSION_CODE }}
          author=Alien-Et
          description=A Magisk module to integrate AList file server into Android system
          updateJson=https://raw.githubusercontent.com/Alien-Et/Alist-Magisk/main/update.json
          EOF
          
          # 创建 customize.sh
          cat > Alist-Magisk/customize.sh << 'EOF'
          #!/system/bin/sh
          # 打印安装信息
          ui_print "正在安装 AList Magisk 模块..."

          # 检测 CPU 架构
          ARCH=$(getprop ro.product.cpu.abi)
          ui_print "检测到架构: $ARCH"

          # 定义校验和文件
          CHECKSUM_FILE="$MODPATH/system/bin/checksums.txt"

          # 校验二进制文件
          if [ -f "$CHECKSUM_FILE" ]; then
            ui_print "正在校验二进制文件..."
            if echo "$ARCH" | grep -q "arm64"; then
              if ! grep "alist-arm64" "$CHECKSUM_FILE" | sha256sum -c; then
                ui_print "64 位二进制校验失败"
                exit 1
              fi
            else
              if ! grep "alist-arm" "$CHECKSUM_FILE" | sha256sum -c; then
                ui_print "32 位二进制校验失败"
                exit 1
              fi
            fi
            ui_print "二进制校验通过"
          else
            ui_print "未找到校验和文件，跳过校验"
          fi

          # 根据架构选择二进制文件
          if echo "$ARCH" | grep -q "arm64"; then
            ui_print "安装 64 位 AList 二进制..."
            mv $MODPATH/system/bin/alist-arm64 $MODPATH/system/bin/alist
            rm $MODPATH/system/bin/alist-arm
          else
            ui_print "安装 32 位 AList 二进制..."
            mv $MODPATH/system/bin/alist-arm $MODPATH/system/bin/alist
            rm $MODPATH/system/bin/alist-arm64
          fi

          # 删除校验和文件
          rm -f "$CHECKSUM_FILE"

          # 设置二进制权限
          chmod 755 $MODPATH/system/bin/alist
          ui_print "AList 已安装到 /system/bin/alist"

          # 定义数据目录和密码文件
          DATA_DIR="$MODPATH/data"
          PASSWORD_FILE="$MODPATH/密码.txt"

          # 检查 data 目录是否存在且非空
          if [ ! -d "$DATA_DIR" ] || [ -z "$(ls -A $DATA_DIR)" ]; then
            # 首次安装：创建 data 目录
            mkdir -p "$DATA_DIR"
            
            # 设置随机密码并获取输出
            OUTPUT=$(/system/bin/sh -c "cd $MODPATH/system/bin && ./alist admin set random --data $DATA_DIR 2>&1 | grep -E 'username|password' | awk '/username/ {print \"账号：\" \$NF} /password/ {print \"密码：\" \$NF}'")
            
            # 输出账号和密码到安装界面
            echo "$OUTPUT" | while IFS= read -r line; do
              ui_print "$line"
            done
            
            # 保存密码到 密码.txt（仅保存密码部分）
            echo "$OUTPUT" | grep "密码：" | awk '{print $2}' > "$PASSWORD_FILE"
            chmod 644 "$PASSWORD_FILE"
            ui_print "密码已保存到 $PASSWORD_FILE"
          else
            ui_print "检测到已有 data 目录，跳过密码设置"
          fi
          EOF
          
          # 创建 service.sh
          cat > Alist-Magisk/service.sh << 'EOF'
          #!/system/bin/sh
          # AList 服务启动脚本

          # 定义数据目录
          DATA_DIR="$MODPATH/data"
          ALIST_BINARY="/system/bin/alist"

          # 启动 AList 服务（后台运行）
          $ALIST_BINARY server --data "$DATA_DIR" &
          EOF
          
          # 创建 update.json（写入根目录）
          cat > update.json << EOF
          {
              "version": "${{ env.ALIST_VERSION }}",
              "versionCode": ${{ env.ALIST_VERSION_CODE }},
              "zipUrl": "https://github.com/Alien-Et/Alist-Magisk/releases/download/${{ env.ALIST_VERSION }}/alist-magisk-${{ env.ALIST_VERSION }}.zip",
              "changelog": "https://raw.githubusercontent.com/Alien-Et/Alist-Magisk/main/Alist-Magisk/CHANGELOG.md"
          }
          EOF
          
          # 创建 CHANGELOG.md
          cat > Alist-Magisk/CHANGELOG.md << EOF
          # Changelog
          - ${{ env.ALIST_VERSION }}: Synced with AList official release ${{ env.ALIST_VERSION }}
          ${{ env.ALIST_CHANGELOG }}
          EOF
          
          # 创建 README.md
          cat > Alist-Magisk/README.md << EOF
          # AList Magisk 模块
          - 自动同步 AList 官方版本
          - 支持 32/64 位架构
          - 首次安装生成随机密码，保存到 密码.txt
          - 更新地址: https://raw.githubusercontent.com/Alien-Et/Alist-Magisk/main/update.json
          EOF
          
          # 提交文件到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Alist-Magisk/ update.json
          git commit -m "更新 AList Magisk 模块文件到 ${{ env.ALIST_VERSION }}"
          git push
          
          # 打包模块（不包含 update.json）
          cd Alist-Magisk
          zip -r ../alist-magisk-${{ env.ALIST_VERSION }}.zip module.prop customize.sh service.sh system CHANGELOG.md
          cd ..

      # 创建 GitHub Release
      - name: 创建 GitHub Release
        if: env.SHOULD_BUILD == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.ALIST_VERSION }}
          release_name: AList Magisk Module ${{ env.ALIST_VERSION }}
          draft: false
          prerelease: false

      # 上传模块到 Release
      - name: 上传模块到 Release
        if: env.SHOULD_BUILD == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./alist-magisk-${{ env.ALIST_VERSION }}.zip
          asset_name: alist-magisk-${{ env.ALIST_VERSION }}.zip
          asset_content_type: application/zip

      # 发送 Discord 通知
      - name: 通知 Discord
        if: env.SHOULD_BUILD == 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "新 AList Magisk 模块发布: ${{ env.ALIST_VERSION }}"

      # 清理工作目录
      - name: 清理工作目录
        if: always()
        run: |
          rm -rf alist-magisk-*.zip alist-arm*.tar.gz